import { GoogleGenAI, Modality } from '@google/genai';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Ki·ªÉm tra API key
if (!process.env.GEMINI_API_KEY || process.env.GEMINI_API_KEY === 'your_api_key_here') {
    console.error('‚ùå Vui l√≤ng c·∫≠p nh·∫≠t GEMINI_API_KEY trong file .env');
    console.log('üìù B·∫°n c√≥ th·ªÉ l·∫•y API key t·∫°i: https://aistudio.google.com/app/apikey');
    process.exit(1);
}

const ai = new GoogleGenAI({
    apiKey: process.env.GEMINI_API_KEY
});

const model = 'gemini-live-2.5-flash-preview';
const config = { responseModalities: [Modality.TEXT] };

async function textOnlyDemo() {
    console.log('üí¨ Demo G·ª≠i v√† Nh·∫≠n Tin Nh·∫Øn VƒÉn B·∫£n v·ªõi Gemini Live');
    console.log('=======================================================');

    const responseQueue = [];

    // Helper function ƒë·ªÉ ch·ªù message
    async function waitMessage() {
        let done = false;
        let message = undefined;
        while (!done) {
            message = responseQueue.shift();
            if (message) {
                done = true;
            } else {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        }
        return message;
    }

    // Helper function ƒë·ªÉ x·ª≠ l√Ω m·ªôt turn ho√†n ch·ªânh
    async function handleTurn() {
        const turns = [];
        let done = false;
        while (!done) {
            const message = await waitMessage();
            turns.push(message);
            if (message.serverContent && message.serverContent.turnComplete) {
                done = true;
            }
        }
        return turns;
    }

    try {
        console.log('üîó ƒêang k·∫øt n·ªëi v·ªõi Gemini Live API...');

        const session = await ai.live.connect({
            model: model,
            callbacks: {
                onopen: function () {
                    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
                },
                onmessage: function (message) {
                    responseQueue.push(message);
                },
                onerror: function (e) {
                    console.error('‚ùå L·ªói:', e.message);
                },
                onclose: function (e) {
                    console.log('üîå ƒê√≥ng k·∫øt n·ªëi:', e.reason);
                },
            },
            config: config,
        });

        // Danh s√°ch c√¢u h·ªèi ƒë·ªÉ test
        const questions = [
            'Hello how are you?',
            'Xin ch√†o! B·∫°n c√≥ kh·ªèe kh√¥ng?',
            'What is the capital of France?',
            'Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?',
            'Can you help me learn programming?',
            'C·∫£m ∆°n b·∫°n!'
        ];

        // G·ª≠i t·ª´ng c√¢u h·ªèi v√† nh·∫≠n ph·∫£n h·ªìi
        for (let i = 0; i < questions.length; i++) {
            const question = questions[i];
            
            console.log(`\nüì§ C√¢u h·ªèi ${i + 1}: "${question}"`);
            console.log('‚è≥ ƒêang g·ª≠i v√† ch·ªù ph·∫£n h·ªìi...');

            // G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
            const inputTurns = question;
            session.sendClientContent({ turns: inputTurns });

            // Ch·ªù v√† x·ª≠ l√Ω ph·∫£n h·ªìi
            const turns = await handleTurn();
            
            // Hi·ªÉn th·ªã ph·∫£n h·ªìi
            for (const turn of turns) {
                if (turn.text) {
                    console.log('üí¨ Gemini:', turn.text);
                } else if (turn.data) {
                    console.log('üì® Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu inline:', turn.data);
                }
            }

            // Ch·ªù m·ªôt ch√∫t gi·ªØa c√°c c√¢u h·ªèi
            if (i < questions.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        console.log('\nüéâ Demo ho√†n th√†nh!');
        session.close();

    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫°y demo:', error.message);
        if (error.message.includes('API key')) {
            console.log('üí° H√£y ki·ªÉm tra l·∫°i API key trong file .env');
        }
    }
}

// Demo v·ªõi context conversation (nhi·ªÅu l∆∞·ª£t h·ªôi tho·∫°i)
async function contextConversationDemo() {
    console.log('\nüí¨ Demo H·ªôi Tho·∫°i C√≥ Ng·ªØ C·∫£nh');
    console.log('================================');

    const responseQueue = [];

    async function waitMessage() {
        let done = false;
        let message = undefined;
        while (!done) {
            message = responseQueue.shift();
            if (message) {
                done = true;
            } else {
                await new Promise((resolve) => setTimeout(resolve, 100));
            }
        }
        return message;
    }

    async function handleTurn() {
        const turns = [];
        let done = false;
        while (!done) {
            const message = await waitMessage();
            turns.push(message);
            if (message.serverContent && message.serverContent.turnComplete) {
                done = true;
            }
        }
        return turns;
    }

    try {
        const session = await ai.live.connect({
            model: model,
            callbacks: {
                onopen: () => console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!'),
                onmessage: (message) => responseQueue.push(message),
                onerror: (e) => console.error('‚ùå L·ªói:', e.message),
                onclose: (e) => console.log('üîå ƒê√≥ng k·∫øt n·ªëi:', e.reason),
            },
            config: config,
        });

        // Thi·∫øt l·∫≠p ng·ªØ c·∫£nh h·ªôi tho·∫°i
        console.log('üìù Thi·∫øt l·∫≠p ng·ªØ c·∫£nh h·ªôi tho·∫°i...');
        
        let inputTurns = [
            { "role": "user", "parts": [{ "text": "What is the capital of France?" }] },
            { "role": "model", "parts": [{ "text": "Paris" }] },
        ];

        session.sendClientContent({ turns: inputTurns, turnComplete: false });

        // Ti·∫øp t·ª•c h·ªôi tho·∫°i
        console.log('üí¨ Ti·∫øp t·ª•c h·ªôi tho·∫°i...');
        
        inputTurns = [{ "role": "user", "parts": [{ "text": "What is the capital of Germany?" }] }];
        session.sendClientContent({ turns: inputTurns, turnComplete: true });

        const turns = await handleTurn();
        
        for (const turn of turns) {
            if (turn.text) {
                console.log('üí¨ Gemini:', turn.text);
            }
        }

        console.log('\nüéâ Demo ng·ªØ c·∫£nh ho√†n th√†nh!');
        session.close();

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

// Main function
async function main() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu Demo Text-Only v·ªõi Gemini Live API\n');
    
    // Ch·∫°y demo c∆° b·∫£n
    await textOnlyDemo();
    
    // Ch·ªù m·ªôt ch√∫t
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Ch·∫°y demo ng·ªØ c·∫£nh
    await contextConversationDemo();
}

// Ch·∫°y demo n·∫øu file ƒë∆∞·ª£c ch·∫°y tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(console.error);
}
