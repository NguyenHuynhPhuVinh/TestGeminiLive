import { GoogleGenAI, Modality } from "@google/genai";
import * as fs from "node:fs";
import pkg from "wavefile";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

const { WaveFile } = pkg;

// Ki·ªÉm tra API key
if (
  !process.env.GEMINI_API_KEY ||
  process.env.GEMINI_API_KEY === "your_api_key_here"
) {
  console.error("‚ùå Vui l√≤ng c·∫≠p nh·∫≠t GEMINI_API_KEY trong file .env");
  console.log(
    "üìù B·∫°n c√≥ th·ªÉ l·∫•y API key t·∫°i: https://aistudio.google.com/app/apikey"
  );
  process.exit(1);
}

const ai = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY,
});

const model =
  process.env.GEMINI_MODEL || "gemini-2.5-flash-preview-native-audio-dialog";

class GeminiLiveStreaming {
  constructor() {
    this.session = null;
    this.responseQueue = [];
    this.isConnected = false;
    this.audioChunks = [];
  }

  async connect() {
    console.log("üîó ƒêang k·∫øt n·ªëi v·ªõi Gemini Live API...");

    const config = {
      responseModalities: [Modality.TEXT, Modality.AUDIO],
      systemInstruction:
        "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát. Khi ng∆∞·ªùi d√πng n√≥i ti·∫øng Anh, b·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi b·∫±ng ti·∫øng Anh.",
    };

    try {
      this.session = await ai.live.connect({
        model: model,
        callbacks: {
          onopen: () => {
            console.log("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi Gemini Live!");
            this.isConnected = true;
          },
          onmessage: (message) => {
            this.responseQueue.push(message);
            if (message.data) {
              console.log("üéµ Nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi √¢m thanh t·ª´ Gemini");
              this.handleAudioResponse(message);
            }
            if (message.serverContent?.modelTurn?.parts) {
              const textParts = message.serverContent.modelTurn.parts
                .filter((part) => part.text)
                .map((part) => part.text);
              if (textParts.length > 0) {
                console.log("üí¨ Gemini:", textParts.join(" "));
              }
            }
          },
          onerror: (e) => {
            console.error("‚ùå L·ªói k·∫øt n·ªëi:", e.message);
            this.isConnected = false;
          },
          onclose: (e) => {
            console.log("üîå ƒê√≥ng k·∫øt n·ªëi:", e.reason);
            this.isConnected = false;
          },
        },
        config: config,
      });

      return true;
    } catch (error) {
      console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi:", error.message);
      return false;
    }
  }

  async sendAudioChunk(audioData) {
    if (!this.isConnected || !this.session) {
      console.log("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi v·ªõi Gemini Live");
      return;
    }

    try {
      // Chuy·ªÉn ƒë·ªïi audio data th√†nh base64
      const base64Audio = Buffer.from(audioData).toString("base64");

      this.session.sendRealtimeInput({
        audio: {
          data: base64Audio,
          mimeType: "audio/pcm;rate=16000",
        },
      });

      console.log("üì§ ƒê√£ g·ª≠i chunk √¢m thanh");
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i √¢m thanh:", error.message);
    }
  }

  async sendTextMessage(text) {
    if (!this.isConnected || !this.session) {
      console.log("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi v·ªõi Gemini Live");
      return;
    }

    try {
      this.session.sendRealtimeInput({
        text: text,
      });
      console.log("üì§ ƒê√£ g·ª≠i tin nh·∫Øn:", text);
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error.message);
    }
  }

  handleAudioResponse(message) {
    if (message.data) {
      this.audioChunks.push(message.data);
    }
  }

  async saveAudioResponse(filename = "streaming_response.wav") {
    if (this.audioChunks.length === 0) {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu √¢m thanh ƒë·ªÉ l∆∞u");
      return;
    }

    try {
      // K·∫øt h·ª£p t·∫•t c·∫£ audio chunks
      const combinedAudio = this.audioChunks.reduce((acc, chunk) => {
        const buffer = Buffer.from(chunk, "base64");
        const intArray = new Int16Array(
          buffer.buffer,
          buffer.byteOffset,
          buffer.byteLength / Int16Array.BYTES_PER_ELEMENT
        );
        return acc.concat(Array.from(intArray));
      }, []);

      const audioBuffer = new Int16Array(combinedAudio);
      const wf = new WaveFile();
      wf.fromScratch(1, 24000, "16", audioBuffer); // output is 24kHz
      fs.writeFileSync(filename, wf.toBuffer());

      console.log(`‚úÖ ƒê√£ l∆∞u ph·∫£n h·ªìi √¢m thanh v√†o ${filename}`);

      // Reset audio chunks
      this.audioChunks = [];
    } catch (error) {
      console.error("‚ùå L·ªói khi l∆∞u √¢m thanh:", error.message);
    }
  }

  disconnect() {
    if (this.session) {
      this.session.close();
      this.session = null;
      this.isConnected = false;
      console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi");
    }
  }
}

// Demo streaming v·ªõi text input
async function demoTextStreaming() {
  console.log("üéØ Demo Gemini Live Streaming v·ªõi Text Input");
  console.log("=====================================");

  const streaming = new GeminiLiveStreaming();

  // K·∫øt n·ªëi
  const connected = await streaming.connect();
  if (!connected) {
    return;
  }

  // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ k·∫øt n·ªëi ·ªïn ƒë·ªãnh
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // G·ª≠i m·ªôt s·ªë tin nh·∫Øn test
  const messages = [
    "Xin ch√†o! B·∫°n c√≥ kh·ªèe kh√¥ng?",
    "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?",
    "B·∫°n c√≥ th·ªÉ gi√∫p t√¥i h·ªçc ti·∫øng Anh kh√¥ng?",
  ];

  for (let i = 0; i < messages.length; i++) {
    console.log(`\nüìù G·ª≠i tin nh·∫Øn ${i + 1}: ${messages[i]}`);
    await streaming.sendTextMessage(messages[i]);

    // Ch·ªù ph·∫£n h·ªìi
    console.log("‚è≥ ƒêang ch·ªù ph·∫£n h·ªìi...");
    await new Promise((resolve) => setTimeout(resolve, 3000));

    // L∆∞u ph·∫£n h·ªìi √¢m thanh
    await streaming.saveAudioResponse(`response_${i + 1}.wav`);
  }

  // Ng·∫Øt k·∫øt n·ªëi
  streaming.disconnect();
  console.log("\nüéâ Demo ho√†n th√†nh!");
}

// Demo streaming v·ªõi audio chunks (m√¥ ph·ªèng microphone input)
async function demoAudioStreaming() {
  console.log("üéØ Demo Gemini Live Streaming v·ªõi Audio Input");
  console.log("==========================================");

  const streaming = new GeminiLiveStreaming();

  // K·∫øt n·ªëi
  const connected = await streaming.connect();
  if (!connected) {
    return;
  }

  // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ k·∫øt n·ªëi ·ªïn ƒë·ªãnh
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // T·∫°o audio chunks m√¥ ph·ªèng (sine waves v·ªõi t·∫ßn s·ªë kh√°c nhau)
  console.log("üéµ T·∫°o v√† g·ª≠i audio chunks m√¥ ph·ªèng...");

  const sampleRate = 16000;
  const chunkDuration = 0.5; // 0.5 gi√¢y m·ªói chunk
  const samplesPerChunk = sampleRate * chunkDuration;

  const frequencies = [440, 523, 659]; // A4, C5, E5

  for (let i = 0; i < frequencies.length; i++) {
    const frequency = frequencies[i];
    console.log(`üì§ G·ª≠i audio chunk ${i + 1} (${frequency}Hz)...`);

    // T·∫°o sine wave
    const audioData = new Int16Array(samplesPerChunk);
    for (let j = 0; j < samplesPerChunk; j++) {
      audioData[j] =
        Math.sin((2 * Math.PI * frequency * j) / sampleRate) * 32767 * 0.3;
    }

    await streaming.sendAudioChunk(audioData);

    // Ch·ªù m·ªôt ch√∫t gi·ªØa c√°c chunks
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  // Ch·ªù ph·∫£n h·ªìi cu·ªëi c√πng
  console.log("‚è≥ ƒêang ch·ªù ph·∫£n h·ªìi cu·ªëi c√πng...");
  await new Promise((resolve) => setTimeout(resolve, 3000));

  // L∆∞u ph·∫£n h·ªìi √¢m thanh
  await streaming.saveAudioResponse("audio_streaming_response.wav");

  // Ng·∫Øt k·∫øt n·ªëi
  streaming.disconnect();
  console.log("\nüéâ Demo ho√†n th√†nh!");
}

// Main function
async function main() {
  console.log("üöÄ Gemini Live Streaming Demo");
  console.log("============================");

  const args = process.argv.slice(2);
  const mode = args[0] || "text";

  if (mode === "audio") {
    await demoAudioStreaming();
  } else {
    await demoTextStreaming();
  }
}

// Export class ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c file kh√°c
export { GeminiLiveStreaming };

// Ch·∫°y demo n·∫øu file ƒë∆∞·ª£c ch·∫°y tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
